// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/isaya1910/zhasa-news/db/sqlc (interfaces: Store)

// Package mock_sqlc is a generated GoMock package.
package mock_sqlc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/isaya1910/zhasa-news/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddLike mocks base method.
func (m *MockStore) AddLike(arg0 context.Context, arg1 db.AddLikeParams) (db.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLike", arg0, arg1)
	ret0, _ := ret[0].(db.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLike indicates an expected call of AddLike.
func (mr *MockStoreMockRecorder) AddLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLike", reflect.TypeOf((*MockStore)(nil).AddLike), arg0, arg1)
}

// AddLikeTx mocks base method.
func (m *MockStore) AddLikeTx(arg0 context.Context, arg1 int32, arg2 db.CreateOrUpdateUserParams) (db.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLikeTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(db.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLikeTx indicates an expected call of AddLikeTx.
func (mr *MockStoreMockRecorder) AddLikeTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLikeTx", reflect.TypeOf((*MockStore)(nil).AddLikeTx), arg0, arg1, arg2)
}

// CreateComment mocks base method.
func (m *MockStore) CreateComment(arg0 context.Context, arg1 db.CreateCommentParams) (db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1)
	ret0, _ := ret[0].(db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockStoreMockRecorder) CreateComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockStore)(nil).CreateComment), arg0, arg1)
}

// CreateCommentTx mocks base method.
func (m *MockStore) CreateCommentTx(arg0 context.Context, arg1 db.CreateCommentParams, arg2 db.CreateOrUpdateUserParams) (db.Comment, db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(db.Comment)
	ret1, _ := ret[1].(db.User)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCommentTx indicates an expected call of CreateCommentTx.
func (mr *MockStoreMockRecorder) CreateCommentTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentTx", reflect.TypeOf((*MockStore)(nil).CreateCommentTx), arg0, arg1, arg2)
}

// CreateOrUpdateUser mocks base method.
func (m *MockStore) CreateOrUpdateUser(arg0 context.Context, arg1 db.CreateOrUpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateUser indicates an expected call of CreateOrUpdateUser.
func (mr *MockStoreMockRecorder) CreateOrUpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateUser", reflect.TypeOf((*MockStore)(nil).CreateOrUpdateUser), arg0, arg1)
}

// CreatePost mocks base method.
func (m *MockStore) CreatePost(arg0 context.Context, arg1 db.CreatePostParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockStoreMockRecorder) CreatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockStore)(nil).CreatePost), arg0, arg1)
}

// CreatePostTx mocks base method.
func (m *MockStore) CreatePostTx(arg0 context.Context, arg1 db.CreatePostParams, arg2 db.CreateOrUpdateUserParams) (db.Post, db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(db.User)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePostTx indicates an expected call of CreatePostTx.
func (mr *MockStoreMockRecorder) CreatePostTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostTx", reflect.TypeOf((*MockStore)(nil).CreatePostTx), arg0, arg1, arg2)
}

// DeleteComment mocks base method.
func (m *MockStore) DeleteComment(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockStoreMockRecorder) DeleteComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockStore)(nil).DeleteComment), arg0, arg1)
}

// DeleteLike mocks base method.
func (m *MockStore) DeleteLike(arg0 context.Context, arg1 db.DeleteLikeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLike indicates an expected call of DeleteLike.
func (mr *MockStoreMockRecorder) DeleteLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLike", reflect.TypeOf((*MockStore)(nil).DeleteLike), arg0, arg1)
}

// DeleteLikeTx mocks base method.
func (m *MockStore) DeleteLikeTx(arg0 context.Context, arg1 int32, arg2 db.CreateOrUpdateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLikeTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLikeTx indicates an expected call of DeleteLikeTx.
func (mr *MockStoreMockRecorder) DeleteLikeTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLikeTx", reflect.TypeOf((*MockStore)(nil).DeleteLikeTx), arg0, arg1, arg2)
}

// DeletePost mocks base method.
func (m *MockStore) DeletePost(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockStoreMockRecorder) DeletePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockStore)(nil).DeletePost), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// GetCommentById mocks base method.
func (m *MockStore) GetCommentById(arg0 context.Context, arg1 int32) (db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentById", arg0, arg1)
	ret0, _ := ret[0].(db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentById indicates an expected call of GetCommentById.
func (mr *MockStoreMockRecorder) GetCommentById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentById", reflect.TypeOf((*MockStore)(nil).GetCommentById), arg0, arg1)
}

// GetCommentsAndAuthorsByPostId mocks base method.
func (m *MockStore) GetCommentsAndAuthorsByPostId(arg0 context.Context, arg1 int32) ([]db.GetCommentsAndAuthorsByPostIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsAndAuthorsByPostId", arg0, arg1)
	ret0, _ := ret[0].([]db.GetCommentsAndAuthorsByPostIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsAndAuthorsByPostId indicates an expected call of GetCommentsAndAuthorsByPostId.
func (mr *MockStoreMockRecorder) GetCommentsAndAuthorsByPostId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsAndAuthorsByPostId", reflect.TypeOf((*MockStore)(nil).GetCommentsAndAuthorsByPostId), arg0, arg1)
}

// GetPostById mocks base method.
func (m *MockStore) GetPostById(arg0 context.Context, arg1 int32) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostById", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostById indicates an expected call of GetPostById.
func (mr *MockStoreMockRecorder) GetPostById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostById", reflect.TypeOf((*MockStore)(nil).GetPostById), arg0, arg1)
}

// GetPostLikedUsers mocks base method.
func (m *MockStore) GetPostLikedUsers(arg0 context.Context, arg1 db.GetPostLikedUsersParams) ([]db.GetPostLikedUsersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostLikedUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPostLikedUsersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostLikedUsers indicates an expected call of GetPostLikedUsers.
func (mr *MockStoreMockRecorder) GetPostLikedUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostLikedUsers", reflect.TypeOf((*MockStore)(nil).GetPostLikedUsers), arg0, arg1)
}

// GetPostLikesCount mocks base method.
func (m *MockStore) GetPostLikesCount(arg0 context.Context, arg1 int32) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostLikesCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostLikesCount indicates an expected call of GetPostLikesCount.
func (mr *MockStoreMockRecorder) GetPostLikesCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostLikesCount", reflect.TypeOf((*MockStore)(nil).GetPostLikesCount), arg0, arg1)
}

// GetPostsAndPostAuthors mocks base method.
func (m *MockStore) GetPostsAndPostAuthors(arg0 context.Context, arg1 db.GetPostsAndPostAuthorsParams) ([]db.GetPostsAndPostAuthorsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsAndPostAuthors", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPostsAndPostAuthorsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsAndPostAuthors indicates an expected call of GetPostsAndPostAuthors.
func (mr *MockStoreMockRecorder) GetPostsAndPostAuthors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsAndPostAuthors", reflect.TypeOf((*MockStore)(nil).GetPostsAndPostAuthors), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 int32) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserPostLike mocks base method.
func (m *MockStore) GetUserPostLike(arg0 context.Context, arg1 db.GetUserPostLikeParams) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPostLike", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPostLike indicates an expected call of GetUserPostLike.
func (mr *MockStoreMockRecorder) GetUserPostLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPostLike", reflect.TypeOf((*MockStore)(nil).GetUserPostLike), arg0, arg1)
}

// ListPosts mocks base method.
func (m *MockStore) ListPosts(arg0 context.Context) ([]db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPosts", arg0)
	ret0, _ := ret[0].([]db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPosts indicates an expected call of ListPosts.
func (mr *MockStoreMockRecorder) ListPosts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPosts", reflect.TypeOf((*MockStore)(nil).ListPosts), arg0)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0)
}
