// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: user.sql

package db

import (
	"context"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO users (
  first_name, second_name 
) VALUES (
  $1, $2
)
RETURNING id, first_name, second_name
`

type CreateAuthorParams struct {
	FirstName  string `json:"first_name"`
	SecondName string `json:"second_name"`
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createAuthor, arg.FirstName, arg.SecondName)
	var i User
	err := row.Scan(&i.ID, &i.FirstName, &i.SecondName)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const listusers = `-- name: Listusers :many
SELECT id, first_name, second_name FROM users
ORDER BY name
`

func (q *Queries) Listusers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.FirstName, &i.SecondName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
